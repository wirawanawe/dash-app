exports.id=6821,exports.ids=[6821],exports.modules={28303:e=>{function a(e){var a=Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}a.keys=()=>[],a.resolve=a,a.id=28303,e.exports=a},96487:()=>{},78335:()=>{},19637:(e,a,t)=>{"use strict";t.d(a,{P:()=>l,XA:()=>p});var i=t(60820),n=t(95482),r=t(79551),d=t(33873);let s=(0,r.fileURLToPath)("file:///Volumes/Data-2/PHC/Project/dash-app/lib/db.js"),o=(0,d.dirname)(s),c=(0,d.resolve)(o,"..");n.config({path:(0,d.resolve)(c,".env")}),console.log("Database configuration:",{host:"localhost",user:"root",database:"phc_dashboard"});let u=i.createPool({host:"localhost",user:"root",password:"pr1k1t1w",database:"phc_dashboard",waitForConnections:!0,connectionLimit:10,queueLimit:0,debug:!1,connectTimeout:1e4,typeCast:function(e,a){return"TINY"===e.type&&1===e.length?"1"===e.string():a()}});async function p(){try{return await u.getConnection()}catch(e){throw console.error("Error getting DB connection:",e),Error("Database connection failed")}}async function l(e,a=[]){try{let t=a.map(e=>"number"==typeof e?Number(e):e);console.log("Executing SQL with params:",{sql:e,formattedParams:t});let[i]=await u.execute(e,t);return i}catch(e){throw console.error("Database query error:",e),e}}},99527:(e,a,t)=>{"use strict";t.d(a,{$g:()=>c,AY:()=>s,CC:()=>d,Gp:()=>r,Hv:()=>E,KJ:()=>n,LE:()=>p,hD:()=>l,hL:()=>o,j0:()=>u});var i=t(19637);let n={async findUnique(e){let a=[],t=[];e.id&&(a.push("id = ?"),t.push(e.id)),e.email&&(a.push("email = ?"),t.push(e.email));let n=`SELECT * FROM users WHERE ${a.join(" AND ")} LIMIT 1`;return(await (0,i.P)(n,t))[0]||null},async findMany(e={}){let a="SELECT * FROM users",t=[];if(e.where){let i=[];e.where.role&&(i.push("role = ?"),t.push(e.where.role)),i.length>0&&(a+=` WHERE ${i.join(" AND ")}`)}return e.orderBy&&e.orderBy.createdAt&&(a+=` ORDER BY created_at ${e.orderBy.createdAt.toUpperCase()}`),await (0,i.P)(a,t)},async create(e){let a=`
      INSERT INTO users (email, password, name, role, created_at, updated_at)
      VALUES (?, ?, ?, ?, NOW(), NOW())
    `,t=[e.email,e.password,e.name,e.role||"user"],n=await (0,i.P)(a,t);return await this.findUnique({id:n.insertId})},async update(e,a){let t=[],n=[];void 0!==a.name&&(t.push("name = ?"),n.push(a.name)),void 0!==a.email&&(t.push("email = ?"),n.push(a.email)),void 0!==a.password&&(t.push("password = ?"),n.push(a.password)),void 0!==a.role&&(t.push("role = ?"),n.push(a.role)),t.push("updated_at = NOW()");let r=`UPDATE users SET ${t.join(", ")} WHERE id = ?`;return n.push(e.id),await (0,i.P)(r,n),await this.findUnique(e)}},r={async findUnique(e){let a=[],t=[];e.id&&(a.push("id = ?"),t.push(e.id)),e.mrNumber&&(a.push("mr_number = ?"),t.push(e.mrNumber));let n=`SELECT * FROM patients WHERE ${a.join(" AND ")} LIMIT 1`;return(await (0,i.P)(n,t))[0]||null},async findMany(e={}){let a="SELECT * FROM patients",t=[];if(e.where){let i=[];if(e.where.OR){let a=[];e.where.OR.forEach(e=>{e.name&&e.name.contains&&(a.push("name LIKE ?"),t.push(`%${e.name.contains}%`)),e.nik&&e.nik.contains&&(a.push("nik LIKE ?"),t.push(`%${e.nik.contains}%`)),e.mrNumber&&e.mrNumber.contains&&(a.push("mr_number LIKE ?"),t.push(`%${e.mrNumber.contains}%`))}),a.length>0&&i.push(`(${a.join(" OR ")})`)}i.length>0&&(a+=` WHERE ${i.join(" AND ")}`)}return e.include&&e.include.insurance,e.take&&(a+=` LIMIT ${e.take}`),await (0,i.P)(a,t)},async create(e){let a=`
      INSERT INTO patients (
        mr_number, name, nik, birth_date, gender, blood_type, 
        occupation, marital_status, nip, citizenship, address, 
        phone, email, province_id, province_name, city_id, city_name, 
        district_id, district_name, village_id, village_name, 
        postal_code, company_id, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())
    `,t=[e.mrNumber,e.name,e.nik,e.birthDate,e.gender,e.bloodType,e.occupation,e.maritalStatus,e.nip,e.citizenship||"WNI",e.address,e.phone,e.email,e.provinceId,e.provinceName,e.cityId,e.cityName,e.districtId,e.districtName,e.villageId,e.villageName,e.postalCode,e.companyId],n=await (0,i.P)(a,t);return await this.findUnique({id:n.insertId})},async update(e,a){let t=[],n=[];Object.keys(a).forEach(e=>{void 0!==a[e]&&"insurance"!==e&&(t.push(`${"mrNumber"===e?"mr_number":"birthDate"===e?"birth_date":"bloodType"===e?"blood_type":"maritalStatus"===e?"marital_status":"provinceId"===e?"province_id":"provinceName"===e?"province_name":"cityId"===e?"city_id":"cityName"===e?"city_name":"districtId"===e?"district_id":"districtName"===e?"district_name":"villageId"===e?"village_id":"villageName"===e?"village_name":"postalCode"===e?"postal_code":"companyId"===e?"company_id":e} = ?`),n.push(a[e]))}),t.push("updated_at = NOW()");let r=`UPDATE patients SET ${t.join(", ")} WHERE id = ?`;return n.push(e.id),await (0,i.P)(r,n),await this.findUnique(e)},delete:async e=>(await (0,i.P)("DELETE FROM patients WHERE id = ?",[e.id]),{id:e.id}),async findFirst(e){let a="SELECT * FROM patients",t=[];if(e.where){let i=[];e.where.mrNumber&&e.where.mrNumber.startsWith&&(i.push("mr_number LIKE ?"),t.push(`${e.where.mrNumber.startsWith}%`)),i.length>0&&(a+=` WHERE ${i.join(" AND ")}`)}return e.orderBy&&e.orderBy.mrNumber&&(a+=` ORDER BY mr_number ${e.orderBy.mrNumber.toUpperCase()}`),a+=" LIMIT 1",(await (0,i.P)(a,t))[0]||null}},d={findUnique:async e=>(await (0,i.P)("SELECT * FROM companies WHERE id = ? LIMIT 1",[e.id]))[0]||null,async findMany(e={}){let a="SELECT * FROM companies";return e.orderBy&&e.orderBy.name&&(a+=` ORDER BY name ${e.orderBy.name.toUpperCase()}`),await (0,i.P)(a)},async create(e){let a=`
      INSERT INTO companies (name, address, phone, email, created_at, updated_at)
      VALUES (?, ?, ?, ?, NOW(), NOW())
    `,t=[e.name,e.address,e.phone,e.email],n=await (0,i.P)(a,t);return await this.findUnique({id:n.insertId})},async update(e,a){let t=[],n=[];["name","address","phone","email"].forEach(e=>{void 0!==a[e]&&(t.push(`${e} = ?`),n.push(a[e]))}),t.push("updated_at = NOW()");let r=`UPDATE companies SET ${t.join(", ")} WHERE id = ?`;return n.push(e.id),await (0,i.P)(r,n),await this.findUnique(e)},delete:async e=>(await (0,i.P)("DELETE FROM companies WHERE id = ?",[e.id]),{id:e.id})},s={findUnique:async e=>(await (0,i.P)("SELECT * FROM doctors WHERE id = ? LIMIT 1",[e.id]))[0]||null,async findMany(e={}){let a="SELECT * FROM doctors";return e.orderBy&&e.orderBy.name&&(a+=` ORDER BY name ${e.orderBy.name.toUpperCase()}`),await (0,i.P)(a)},async create(e){let a=`
      INSERT INTO doctors (name, license_number, specialization, phone, email, created_at, updated_at)
      VALUES (?, ?, ?, ?, ?, NOW(), NOW())
    `,t=[e.name,e.licenseNumber,e.specialization,e.phone,e.email],n=await (0,i.P)(a,t);return await this.findUnique({id:n.insertId})},async update(e,a){let t=[],n=[];["name","licenseNumber","specialization","phone","email"].forEach(e=>{void 0!==a[e]&&(t.push(`${"licenseNumber"===e?"license_number":e} = ?`),n.push(a[e]))}),t.push("updated_at = NOW()");let r=`UPDATE doctors SET ${t.join(", ")} WHERE id = ?`;return n.push(e.id),await (0,i.P)(r,n),await this.findUnique(e)},delete:async e=>(await (0,i.P)("DELETE FROM doctors WHERE id = ?",[e.id]),{id:e.id})},o={async findUnique(e){let a=[],t=[];e.id&&(a.push("id = ?"),t.push(e.id)),e.patientId&&(a.push("patient_id = ?"),t.push(e.patientId));let n=`SELECT * FROM insurance WHERE ${a.join(" AND ")} LIMIT 1`;return(await (0,i.P)(n,t))[0]||null},async findMany(e={}){let a="SELECT * FROM insurance";return e.orderBy&&e.orderBy.provider&&(a+=` ORDER BY provider ${e.orderBy.provider.toUpperCase()}`),await (0,i.P)(a)},async create(e){let a=`
      INSERT INTO insurance (provider, number, type, status, patient_id, created_at, updated_at)
      VALUES (?, ?, ?, ?, ?, NOW(), NOW())
    `,t=[e.provider,e.number,e.type,e.status,e.patientId],n=await (0,i.P)(a,t);return await this.findUnique({id:n.insertId})},async update(e,a){let t=[],n=[];["provider","number","type","status"].forEach(e=>{void 0!==a[e]&&(t.push(`${e} = ?`),n.push(a[e]))}),t.push("updated_at = NOW()");let r=`UPDATE insurance SET ${t.join(", ")} WHERE id = ?`;return n.push(e.id),await (0,i.P)(r,n),await this.findUnique(e)},delete:async e=>(await (0,i.P)("DELETE FROM insurance WHERE id = ?",[e.id]),{id:e.id}),deleteMany:async e=>await (0,i.P)("DELETE FROM insurance WHERE patient_id = ?",[e.patientId])},c={findUnique:async e=>(await (0,i.P)("SELECT * FROM icd_codes WHERE id = ? LIMIT 1",[e.id]))[0]||null,async findMany(e={}){let a="SELECT * FROM icd_codes";return e.orderBy&&e.orderBy.code&&(a+=` ORDER BY code ${e.orderBy.code.toUpperCase()}`),await (0,i.P)(a)},async create(e){let a=`
      INSERT INTO icd_codes (code, description, created_at, updated_at)
      VALUES (?, ?, NOW(), NOW())
    `,t=[e.code,e.description],n=await (0,i.P)(a,t);return await this.findUnique({id:n.insertId})},async update(e,a){let t=[],n=[];["code","description"].forEach(e=>{void 0!==a[e]&&(t.push(`${e} = ?`),n.push(a[e]))}),t.push("updated_at = NOW()");let r=`UPDATE icd_codes SET ${t.join(", ")} WHERE id = ?`;return n.push(e.id),await (0,i.P)(r,n),await this.findUnique(e)},delete:async e=>(await (0,i.P)("DELETE FROM icd_codes WHERE id = ?",[e.id]),{id:e.id})},u={findUnique:async e=>(await (0,i.P)("SELECT * FROM treatments WHERE id = ? LIMIT 1",[e.id]))[0]||null,async findMany(e={}){let a="SELECT * FROM treatments";return e.orderBy&&e.orderBy.name&&(a+=` ORDER BY name ${e.orderBy.name.toUpperCase()}`),await (0,i.P)(a)},async create(e){let a=`
      INSERT INTO treatments (name, code, price, created_at, updated_at)
      VALUES (?, ?, ?, NOW(), NOW())
    `,t=[e.name,e.code,e.price],n=await (0,i.P)(a,t);return await this.findUnique({id:n.insertId})},async update(e,a){let t=[],n=[];["name","code","price"].forEach(e=>{void 0!==a[e]&&(t.push(`${e} = ?`),n.push(a[e]))}),t.push("updated_at = NOW()");let r=`UPDATE treatments SET ${t.join(", ")} WHERE id = ?`;return n.push(e.id),await (0,i.P)(r,n),await this.findUnique(e)},delete:async e=>(await (0,i.P)("DELETE FROM treatments WHERE id = ?",[e.id]),{id:e.id})},p={findUnique:async e=>(await (0,i.P)("SELECT * FROM polyclinics WHERE id = ? LIMIT 1",[e.id]))[0]||null,async findMany(e={}){let a="SELECT * FROM polyclinics";return e.orderBy&&e.orderBy.name&&(a+=` ORDER BY name ${e.orderBy.name.toUpperCase()}`),await (0,i.P)(a)},async create(e){let a=`
      INSERT INTO polyclinics (name, description, created_at, updated_at)
      VALUES (?, ?, NOW(), NOW())
    `,t=[e.name,e.description],n=await (0,i.P)(a,t);return await this.findUnique({id:n.insertId})},async update(e,a){let t=[],n=[];["name","description"].forEach(e=>{void 0!==a[e]&&(t.push(`${e} = ?`),n.push(a[e]))}),t.push("updated_at = NOW()");let r=`UPDATE polyclinics SET ${t.join(", ")} WHERE id = ?`;return n.push(e.id),await (0,i.P)(r,n),await this.findUnique(e)},delete:async e=>(await (0,i.P)("DELETE FROM polyclinics WHERE id = ?",[e.id]),{id:e.id})},l={async findFirst(e){let a=[],t=[];e.code&&(a.push("code = ?"),t.push(e.code));let n=`SELECT * FROM postal_codes WHERE ${a.join(" AND ")} LIMIT 1`;return(await (0,i.P)(n,t))[0]||null},async create(e){let a=`
      INSERT INTO postal_codes (code, city, province, created_at, updated_at)
      VALUES (?, ?, ?, NOW(), NOW())
    `,t=[e.code,e.city,e.province];return await (0,i.P)(a,t),await this.findFirst({code:e.code})}};async function E(e){let a=await (0,i.XA)();try{await a.beginTransaction();let t=[];for(let a of e)if("function"==typeof a){let e=await a();t.push(e)}return await a.commit(),t}catch(e){throw await a.rollback(),e}finally{a.release()}}}};
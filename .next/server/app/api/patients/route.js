/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/patients/route";
exports.ids = ["app/api/patients/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/mysql2/lib sync recursive ^cardinal.*$":
/*!****************************************************!*\
  !*** ./node_modules/mysql2/lib/ sync ^cardinal.*$ ***!
  \****************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "(rsc)/./node_modules/mysql2/lib sync recursive ^cardinal.*$";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "timers":
/*!*************************!*\
  !*** external "timers" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("timers");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fpatients%2Froute&page=%2Fapi%2Fpatients%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpatients%2Froute.js&appDir=%2FVolumes%2FData-2%2FPHC%2FProject%2Fdash-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FData-2%2FPHC%2FProject%2Fdash-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fpatients%2Froute&page=%2Fapi%2Fpatients%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpatients%2Froute.js&appDir=%2FVolumes%2FData-2%2FPHC%2FProject%2Fdash-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FData-2%2FPHC%2FProject%2Fdash-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Volumes_Data_2_PHC_Project_dash_app_app_api_patients_route_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/patients/route.js */ \"(rsc)/./app/api/patients/route.js\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/patients/route\",\n        pathname: \"/api/patients\",\n        filename: \"route\",\n        bundlePath: \"app/api/patients/route\"\n    },\n    resolvedPagePath: \"/Volumes/Data-2/PHC/Project/dash-app/app/api/patients/route.js\",\n    nextConfigOutput,\n    userland: _Volumes_Data_2_PHC_Project_dash_app_app_api_patients_route_js__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZwYXRpZW50cyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGcGF0aWVudHMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZwYXRpZW50cyUyRnJvdXRlLmpzJmFwcERpcj0lMkZWb2x1bWVzJTJGRGF0YS0yJTJGUEhDJTJGUHJvamVjdCUyRmRhc2gtYXBwJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZWb2x1bWVzJTJGRGF0YS0yJTJGUEhDJTJGUHJvamVjdCUyRmRhc2gtYXBwJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNjO0FBQzNGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVm9sdW1lcy9EYXRhLTIvUEhDL1Byb2plY3QvZGFzaC1hcHAvYXBwL2FwaS9wYXRpZW50cy9yb3V0ZS5qc1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcGF0aWVudHMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wYXRpZW50c1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcGF0aWVudHMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVm9sdW1lcy9EYXRhLTIvUEhDL1Byb2plY3QvZGFzaC1hcHAvYXBwL2FwaS9wYXRpZW50cy9yb3V0ZS5qc1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fpatients%2Froute&page=%2Fapi%2Fpatients%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpatients%2Froute.js&appDir=%2FVolumes%2FData-2%2FPHC%2FProject%2Fdash-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FData-2%2FPHC%2FProject%2Fdash-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./app/api/patients/route.js":
/*!***********************************!*\
  !*** ./app/api/patients/route.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/db */ \"(rsc)/./lib/db.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/prisma */ \"(rsc)/./lib/prisma.js\");\n\n // Gunakan db.js bukan prisma.js\n // Import helper functions\n// atau import { getPatients } from \"@/lib/prisma\"; // Jika menggunakan helper yang diperbarui\n// Helper function to add delay between requests\nconst delay = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\n// Helper function to fetch with retry\nasync function fetchWithRetry(url, options, maxRetries = 3) {\n    for(let i = 0; i < maxRetries; i++){\n        try {\n            const response = await fetch(url, {\n                ...options,\n                timeout: 30000\n            });\n            return response;\n        } catch (error) {\n            console.log(`Attempt ${i + 1} failed:`, error.message);\n            if (i === maxRetries - 1) {\n                throw error; // Throw on last attempt\n            }\n            // Wait before retrying (exponential backoff)\n            await delay(Math.pow(2, i) * 1000);\n        }\n    }\n}\n// GET all patients from external API\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const search = searchParams.get(\"search\") || \"\";\n        const page = parseInt(searchParams.get(\"page\") || \"1\");\n        const limit = parseInt(searchParams.get(\"limit\") || \"10\");\n        let allPatients = [];\n        let totalFromAPI = 0;\n        if (search) {\n            // When searching, fetch all data to search across all records\n            // We'll fetch data in smaller batches with delays to avoid overwhelming the API\n            let currentPage = 1;\n            let hasMoreData = true;\n            const batchSize = 50; // Reduced batch size to be gentler on the API\n            const delayBetweenRequests = 500; // 500ms delay between requests\n            try {\n                while(hasMoreData){\n                    const apiUrl = `http://api-klinik.doctorphc.id/pasien?page=${currentPage}&limit=${batchSize}`;\n                    console.log(`Fetching batch ${currentPage} for search: ${search}`);\n                    const response = await fetchWithRetry(apiUrl, {\n                        method: \"GET\",\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        }\n                    });\n                    if (!response.ok) {\n                        console.error(`API responded with status: ${response.status}`);\n                        break;\n                    }\n                    const externalData = await response.json();\n                    // Process the external data - the API returns data in a specific format\n                    let rawPatients = [];\n                    if (externalData.data && Array.isArray(externalData.data)) {\n                        rawPatients = externalData.data;\n                    } else if (Array.isArray(externalData)) {\n                        rawPatients = externalData;\n                    }\n                    if (rawPatients.length === 0) {\n                        hasMoreData = false;\n                        break;\n                    }\n                    // Transform the external API data to match our expected format\n                    const transformedPatients = rawPatients.map((patient)=>({\n                            id: patient.No_MR,\n                            mrn: patient.No_MR,\n                            name: patient.Nama_Pasien,\n                            gender: patient.Jenis_Kelamin?.[0]?.name || \"-\",\n                            birthDate: patient.Tgl_Lahir ? patient.Tgl_Lahir.split(\" \")[0] : null,\n                            nik: patient.Identitas?.find((id)=>id.type === \"nik\")?.id || \"\",\n                            nip: patient.Identitas?.find((id)=>id.type === \"nip\")?.id || \"\",\n                            phone: \"\",\n                            address: patient.Alamat_Rumah?.[0]?.Alamat || \"\",\n                            city: patient.Alamat_Rumah?.[0]?.Kota?.[0]?.name || \"\",\n                            province: patient.Alamat_Rumah?.[0]?.Propinsi?.[0]?.name || \"\",\n                            bloodType: patient.Golongan_Darah?.[0]?.name || \"-\",\n                            religion: patient.Agama?.[0]?.name || \"-\",\n                            maritalStatus: patient.Status_Marital?.[0]?.name || \"-\",\n                            occupation: patient.Pekerjaan?.[0]?.name || \"-\",\n                            education: patient.Pendidikan?.[0]?.name || \"-\",\n                            created_at: patient.audittrail?.CreatedDate || null,\n                            updated_at: patient.audittrail?.LastModifiedDate || null\n                        }));\n                    allPatients.push(...transformedPatients);\n                    // Check if we should continue fetching\n                    if (rawPatients.length < batchSize) {\n                        hasMoreData = false;\n                    } else {\n                        currentPage++;\n                    }\n                    // Add a safety limit to prevent infinite loops and too many requests\n                    if (currentPage > 50) {\n                        // Max 2,500 records (50 pages * 50 per page)\n                        console.log(\"Reached maximum page limit for search\");\n                        hasMoreData = false;\n                    }\n                    // Add delay between requests to prevent overwhelming the API\n                    if (hasMoreData) {\n                        await delay(delayBetweenRequests);\n                    }\n                }\n                console.log(`Search completed. Found ${allPatients.length} total patients to filter`);\n            } catch (fetchError) {\n                console.error(\"Error during batch fetching:\", fetchError);\n                // If we encountered an error but have some data, continue with what we have\n                if (allPatients.length === 0) {\n                    // If no data was fetched at all, fall back to single page fetch\n                    console.log(\"Falling back to single page fetch due to batch fetch error\");\n                    try {\n                        const fallbackUrl = `http://api-klinik.doctorphc.id/pasien?page=1&limit=100`;\n                        const fallbackResponse = await fetchWithRetry(fallbackUrl, {\n                            method: \"GET\",\n                            headers: {\n                                \"Content-Type\": \"application/json\"\n                            }\n                        });\n                        if (fallbackResponse.ok) {\n                            const fallbackData = await fallbackResponse.json();\n                            let rawPatients = [];\n                            if (fallbackData.data && Array.isArray(fallbackData.data)) {\n                                rawPatients = fallbackData.data;\n                            } else if (Array.isArray(fallbackData)) {\n                                rawPatients = fallbackData;\n                            }\n                            allPatients = rawPatients.map((patient)=>({\n                                    id: patient.No_MR,\n                                    mrn: patient.No_MR,\n                                    name: patient.Nama_Pasien,\n                                    gender: patient.Jenis_Kelamin?.[0]?.name || \"-\",\n                                    birthDate: patient.Tgl_Lahir ? patient.Tgl_Lahir.split(\" \")[0] : null,\n                                    nik: patient.Identitas?.find((id)=>id.type === \"nik\")?.id || \"\",\n                                    nip: patient.Identitas?.find((id)=>id.type === \"nip\")?.id || \"\",\n                                    phone: \"\",\n                                    address: patient.Alamat_Rumah?.[0]?.Alamat || \"\",\n                                    city: patient.Alamat_Rumah?.[0]?.Kota?.[0]?.name || \"\",\n                                    province: patient.Alamat_Rumah?.[0]?.Propinsi?.[0]?.name || \"\",\n                                    bloodType: patient.Golongan_Darah?.[0]?.name || \"-\",\n                                    religion: patient.Agama?.[0]?.name || \"-\",\n                                    maritalStatus: patient.Status_Marital?.[0]?.name || \"-\",\n                                    occupation: patient.Pekerjaan?.[0]?.name || \"-\",\n                                    education: patient.Pendidikan?.[0]?.name || \"-\",\n                                    created_at: patient.audittrail?.CreatedDate || null,\n                                    updated_at: patient.audittrail?.LastModifiedDate || null\n                                }));\n                        }\n                    } catch (fallbackError) {\n                        console.error(\"Fallback fetch also failed:\", fallbackError);\n                        // Return empty results if all fails\n                        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                            data: [],\n                            pagination: {\n                                total: 0,\n                                page,\n                                limit,\n                                totalPages: 0\n                            },\n                            message: \"Search temporarily unavailable due to API issues\"\n                        });\n                    }\n                }\n            }\n            // Apply search filter to all collected data\n            const filteredPatients = allPatients.filter((patient)=>patient.name && patient.name.toLowerCase().includes(search.toLowerCase()) || patient.mrn && patient.mrn.toLowerCase().includes(search.toLowerCase()) || patient.nik && patient.nik.toLowerCase().includes(search.toLowerCase()));\n            console.log(`Found ${filteredPatients.length} patients matching search: \"${search}\"`);\n            // Apply pagination to filtered results\n            const startIndex = (page - 1) * limit;\n            const endIndex = startIndex + limit;\n            const paginatedPatients = filteredPatients.slice(startIndex, endIndex);\n            totalFromAPI = filteredPatients.length;\n            const totalPages = Math.ceil(totalFromAPI / limit);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                data: paginatedPatients,\n                pagination: {\n                    total: totalFromAPI,\n                    page,\n                    limit,\n                    totalPages\n                }\n            });\n        } else {\n            // When not searching, use regular pagination from API\n            const apiUrl = `http://api-klinik.doctorphc.id/pasien?page=${page}&limit=${limit}`;\n            const response = await fetchWithRetry(apiUrl, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`Failed to fetch from external API: ${response.status} ${response.statusText}`);\n            }\n            const externalData = await response.json();\n            // Process the external data - the API returns data in a specific format\n            let rawPatients = [];\n            if (externalData.data && Array.isArray(externalData.data)) {\n                rawPatients = externalData.data;\n            } else if (Array.isArray(externalData)) {\n                rawPatients = externalData;\n            }\n            // Transform the external API data to match our expected format\n            const patients = rawPatients.map((patient)=>({\n                    id: patient.No_MR,\n                    mrn: patient.No_MR,\n                    name: patient.Nama_Pasien,\n                    gender: patient.Jenis_Kelamin?.[0]?.name || \"-\",\n                    birthDate: patient.Tgl_Lahir ? patient.Tgl_Lahir.split(\" \")[0] : null,\n                    nik: patient.Identitas?.find((id)=>id.type === \"nik\")?.id || \"\",\n                    nip: patient.Identitas?.find((id)=>id.type === \"nip\")?.id || \"\",\n                    phone: \"\",\n                    address: patient.Alamat_Rumah?.[0]?.Alamat || \"\",\n                    city: patient.Alamat_Rumah?.[0]?.Kota?.[0]?.name || \"\",\n                    province: patient.Alamat_Rumah?.[0]?.Propinsi?.[0]?.name || \"\",\n                    bloodType: patient.Golongan_Darah?.[0]?.name || \"-\",\n                    religion: patient.Agama?.[0]?.name || \"-\",\n                    maritalStatus: patient.Status_Marital?.[0]?.name || \"-\",\n                    occupation: patient.Pekerjaan?.[0]?.name || \"-\",\n                    education: patient.Pendidikan?.[0]?.name || \"-\",\n                    created_at: patient.audittrail?.CreatedDate || null,\n                    updated_at: patient.audittrail?.LastModifiedDate || null\n                }));\n            // Use the pagination info from the external API\n            totalFromAPI = externalData[\"total pasien\"] || externalData.total || patients.length;\n            const totalPages = Math.ceil(totalFromAPI / limit);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                data: patients,\n                pagination: {\n                    total: totalFromAPI,\n                    page,\n                    limit,\n                    totalPages\n                }\n            });\n        }\n    } catch (error) {\n        console.error(\"Error fetching patients from external API:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: \"Failed to fetch patients from external API\",\n            error: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n// POST new patient\nasync function POST(request) {\n    try {\n        const data = await request.json();\n        // Validasi data\n        if (!data.name || !data.nik || !data.birthDate) {\n            return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(JSON.stringify({\n                error: \"Nama, NIK, dan Tanggal Lahir wajib diisi\"\n            }), {\n                status: 400,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }\n        // Generate MR Number\n        const year = new Date().getFullYear();\n        const lastPatient = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.Patient.findFirst({\n            where: {\n                mrNumber: {\n                    startsWith: `MR-${year}`\n                }\n            },\n            orderBy: {\n                mrNumber: \"desc\"\n            }\n        });\n        const sequence = lastPatient ? parseInt(lastPatient.mrNumber.split(\"-\")[2]) + 1 : 1;\n        const mrNumber = `MR-${year}-${sequence.toString().padStart(4, \"0\")}`;\n        // Create patient\n        const patient = await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.Patient.create({\n            data: {\n                mrNumber,\n                name: data.name.trim(),\n                nik: data.nik.trim(),\n                birthDate: new Date(data.birthDate),\n                gender: data.gender || null,\n                bloodType: data.bloodType || null,\n                occupation: data.occupation || null,\n                maritalStatus: data.maritalStatus || null,\n                nip: data.nip || null,\n                citizenship: data.citizenship || \"WNI\",\n                address: data.address?.trim() || null,\n                phone: data.phone?.trim() || null,\n                email: data.email?.trim() || null,\n                provinceId: data.provinceId || null,\n                provinceName: data.provinceName || null,\n                cityId: data.cityId || null,\n                cityName: data.cityName || null,\n                districtId: data.districtId || null,\n                districtName: data.districtName || null,\n                villageId: data.villageId || null,\n                villageName: data.villageName || null,\n                postalCode: data.postalCode || null,\n                companyId: data.companyId || null\n            }\n        });\n        // Create insurance if provided\n        if (data.insurance) {\n            await _lib_prisma__WEBPACK_IMPORTED_MODULE_2__.Insurance.create({\n                data: {\n                    patientId: patient.id,\n                    provider: data.insurance.provider,\n                    number: data.insurance.number || null,\n                    type: data.insurance.type || null,\n                    status: data.insurance.status || \"Aktif\"\n                }\n            });\n        }\n        // Format dates before sending response\n        const formattedPatient = {\n            ...patient,\n            birthDate: patient.birthDate ? patient.birthDate.toISOString().split(\"T\")[0] : null,\n            createdAt: patient.createdAt ? patient.createdAt.toISOString() : null,\n            updatedAt: patient.updatedAt ? patient.updatedAt.toISOString() : null\n        };\n        return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(JSON.stringify(formattedPatient), {\n            status: 201,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n    } catch (error) {\n        console.error(\"Error creating patient:\", error);\n        if (error.code === \"P2002\" || error.code === \"ER_DUP_ENTRY\") {\n            return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(JSON.stringify({\n                error: \"NIK sudah terdaftar\"\n            }), {\n                status: 400,\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            });\n        }\n        return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(JSON.stringify({\n            error: \"Gagal menambahkan pasien\"\n        }), {\n            status: 500,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/patients/route.js\n");

/***/ }),

/***/ "(rsc)/./lib/db.js":
/*!*******************!*\
  !*** ./lib/db.js ***!
  \*******************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getConnection: () => (/* binding */ getConnection),\n/* harmony export */   query: () => (/* binding */ query),\n/* harmony export */   rawQuery: () => (/* binding */ rawQuery),\n/* harmony export */   validateConnection: () => (/* binding */ validateConnection)\n/* harmony export */ });\n/* harmony import */ var mysql2_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mysql2/promise */ \"(rsc)/./node_modules/mysql2/promise.js\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dotenv */ \"(rsc)/./node_modules/dotenv/lib/main.js\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n\n\n\n\n// Dapatkan path absolut ke root project\nconst __filename = (0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)(\"file:///Volumes/Data-2/PHC/Project/dash-app/lib/db.js\");\nconst __dirname = (0,path__WEBPACK_IMPORTED_MODULE_3__.dirname)(__filename);\nconst rootDir = (0,path__WEBPACK_IMPORTED_MODULE_3__.resolve)(__dirname, \"..\");\n// Load environment variables dengan path absolut\ndotenv__WEBPACK_IMPORTED_MODULE_1__.config({\n    path: (0,path__WEBPACK_IMPORTED_MODULE_3__.resolve)(rootDir, \".env\")\n});\n// Log database configuration for debugging\nconsole.log(\"Database configuration:\", {\n    host: \"localhost\" || 0,\n    user: \"root\" || 0,\n    database: \"phc_dashboard\" || 0\n});\n// Konfigurasi database\nconst dbConfig = {\n    host: \"localhost\" || 0,\n    user: \"root\" || 0,\n    password: \"pr1k1t1w\" || 0,\n    database: \"phc_dashboard\" || 0,\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n    // Enable debug mode in development\n    debug: \"development\" === \"development\",\n    // Add connection timeout and error handling\n    connectTimeout: 10000,\n    // Convert LIMIT/OFFSET params to numbers\n    typeCast: function(field, next) {\n        if (field.type === \"TINY\" && field.length === 1) {\n            return field.string() === \"1\"; // convert to boolean\n        }\n        return next();\n    }\n};\n// Pool koneksi untuk digunakan di seluruh aplikasi\nconst pool = mysql2_promise__WEBPACK_IMPORTED_MODULE_0__.createPool(dbConfig);\n// Function untuk mendapatkan koneksi dari pool\nasync function getConnection() {\n    try {\n        return await pool.getConnection();\n    } catch (error) {\n        console.error(\"Error getting DB connection:\", error);\n        throw new Error(\"Database connection failed\");\n    }\n}\n// Query helper dengan error handling (menggunakan prepared statements)\nasync function query(sql, params = []) {\n    try {\n        // Ensure all parameters are properly formatted\n        const formattedParams = params.map((param)=>{\n            if (typeof param === \"number\") {\n                return Number(param); // Make sure number params are properly cast\n            }\n            return param;\n        });\n        console.log(\"Executing SQL with params:\", {\n            sql,\n            formattedParams\n        });\n        const [results] = await pool.execute(sql, formattedParams);\n        return results;\n    } catch (error) {\n        console.error(\"Database query error:\", error);\n        throw error;\n    }\n}\n// Query helper tanpa prepared statements untuk perintah seperti USE DATABASE\nasync function rawQuery(sql) {\n    try {\n        const connection = await getConnection();\n        try {\n            const [results] = await connection.query(sql);\n            return results;\n        } finally{\n            connection.release();\n        }\n    } catch (error) {\n        console.error(\"Database raw query error:\", error);\n        throw error;\n    }\n}\n// Validasi koneksi database pada startup\nasync function validateConnection() {\n    try {\n        const connection = await getConnection();\n        connection.release();\n        console.log(\"Database connection successful\");\n        return true;\n    } catch (error) {\n        console.error(\"Database connection failed:\", error);\n        return false;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    query,\n    rawQuery,\n    getConnection,\n    validateConnection\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZGIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQW1DO0FBQ1A7QUFDUTtBQUNJO0FBRXhDLHdDQUF3QztBQUN4QyxNQUFNSyxhQUFhSCxrREFBYUEsQ0FBQyx1REFBZTtBQUNoRCxNQUFNSyxZQUFZSiw2Q0FBT0EsQ0FBQ0U7QUFDMUIsTUFBTUcsVUFBVUosNkNBQU9BLENBQUNHLFdBQVc7QUFFbkMsaURBQWlEO0FBQ2pETiwwQ0FBYSxDQUFDO0lBQUVTLE1BQU1OLDZDQUFPQSxDQUFDSSxTQUFTO0FBQVE7QUFFL0MsMkNBQTJDO0FBQzNDRyxRQUFRQyxHQUFHLENBQUMsMkJBQTJCO0lBQ3JDQyxNQUFNQyxXQUFtQixJQUFJLENBQVc7SUFDeENHLE1BQU1ILE1BQW1CLElBQUksQ0FBTTtJQUNuQ0ssVUFBVUwsZUFBbUIsSUFBSSxDQUFlO0FBRWxEO0FBRUEsdUJBQXVCO0FBQ3ZCLE1BQU1PLFdBQVc7SUFDZlIsTUFBTUMsV0FBbUIsSUFBSSxDQUFXO0lBQ3hDRyxNQUFNSCxNQUFtQixJQUFJLENBQU07SUFDbkNRLFVBQVVSLFVBQXVCLElBQUksQ0FBRTtJQUN2Q0ssVUFBVUwsZUFBbUIsSUFBSSxDQUFlO0lBQ2hEVSxvQkFBb0I7SUFDcEJDLGlCQUFpQjtJQUNqQkMsWUFBWTtJQUNaLG1DQUFtQztJQUNuQ0MsT0FBT2Isa0JBQXlCO0lBQ2hDLDRDQUE0QztJQUM1Q2MsZ0JBQWdCO0lBQ2hCLHlDQUF5QztJQUN6Q0MsVUFBVSxTQUFVQyxLQUFLLEVBQUVDLElBQUk7UUFDN0IsSUFBSUQsTUFBTUUsSUFBSSxLQUFLLFVBQVVGLE1BQU1HLE1BQU0sS0FBSyxHQUFHO1lBQy9DLE9BQU9ILE1BQU1JLE1BQU0sT0FBTyxLQUFLLHFCQUFxQjtRQUN0RDtRQUNBLE9BQU9IO0lBQ1Q7QUFDRjtBQUVBLG1EQUFtRDtBQUNuRCxNQUFNSSxPQUFPbkMsc0RBQWdCLENBQUNxQjtBQUU5QiwrQ0FBK0M7QUFDeEMsZUFBZWdCO0lBQ3BCLElBQUk7UUFDRixPQUFPLE1BQU1GLEtBQUtFLGFBQWE7SUFDakMsRUFBRSxPQUFPQyxPQUFPO1FBQ2QzQixRQUFRMkIsS0FBSyxDQUFDLGdDQUFnQ0E7UUFDOUMsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0FBQ0Y7QUFFQSx1RUFBdUU7QUFDaEUsZUFBZUMsTUFBTUMsR0FBRyxFQUFFQyxTQUFTLEVBQUU7SUFDMUMsSUFBSTtRQUNGLCtDQUErQztRQUMvQyxNQUFNQyxrQkFBa0JELE9BQU9FLEdBQUcsQ0FBQyxDQUFDQztZQUNsQyxJQUFJLE9BQU9BLFVBQVUsVUFBVTtnQkFDN0IsT0FBT0MsT0FBT0QsUUFBUSw0Q0FBNEM7WUFDcEU7WUFDQSxPQUFPQTtRQUNUO1FBRUFsQyxRQUFRQyxHQUFHLENBQUMsOEJBQThCO1lBQUU2QjtZQUFLRTtRQUFnQjtRQUNqRSxNQUFNLENBQUNJLFFBQVEsR0FBRyxNQUFNWixLQUFLYSxPQUFPLENBQUNQLEtBQUtFO1FBQzFDLE9BQU9JO0lBQ1QsRUFBRSxPQUFPVCxPQUFPO1FBQ2QzQixRQUFRMkIsS0FBSyxDQUFDLHlCQUF5QkE7UUFDdkMsTUFBTUE7SUFDUjtBQUNGO0FBRUEsNkVBQTZFO0FBQ3RFLGVBQWVXLFNBQVNSLEdBQUc7SUFDaEMsSUFBSTtRQUNGLE1BQU1TLGFBQWEsTUFBTWI7UUFDekIsSUFBSTtZQUNGLE1BQU0sQ0FBQ1UsUUFBUSxHQUFHLE1BQU1HLFdBQVdWLEtBQUssQ0FBQ0M7WUFDekMsT0FBT007UUFDVCxTQUFVO1lBQ1JHLFdBQVdDLE9BQU87UUFDcEI7SUFDRixFQUFFLE9BQU9iLE9BQU87UUFDZDNCLFFBQVEyQixLQUFLLENBQUMsNkJBQTZCQTtRQUMzQyxNQUFNQTtJQUNSO0FBQ0Y7QUFFQSx5Q0FBeUM7QUFDbEMsZUFBZWM7SUFDcEIsSUFBSTtRQUNGLE1BQU1GLGFBQWEsTUFBTWI7UUFDekJhLFdBQVdDLE9BQU87UUFDbEJ4QyxRQUFRQyxHQUFHLENBQUM7UUFDWixPQUFPO0lBQ1QsRUFBRSxPQUFPMEIsT0FBTztRQUNkM0IsUUFBUTJCLEtBQUssQ0FBQywrQkFBK0JBO1FBQzdDLE9BQU87SUFDVDtBQUNGO0FBRUEsaUVBQWU7SUFDYkU7SUFDQVM7SUFDQVo7SUFDQWU7QUFDRixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIi9Wb2x1bWVzL0RhdGEtMi9QSEMvUHJvamVjdC9kYXNoLWFwcC9saWIvZGIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG15c3FsIGZyb20gXCJteXNxbDIvcHJvbWlzZVwiO1xuaW1wb3J0IGRvdGVudiBmcm9tIFwiZG90ZW52XCI7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSBcInVybFwiO1xuaW1wb3J0IHsgZGlybmFtZSwgcmVzb2x2ZSB9IGZyb20gXCJwYXRoXCI7XG5cbi8vIERhcGF0a2FuIHBhdGggYWJzb2x1dCBrZSByb290IHByb2plY3RcbmNvbnN0IF9fZmlsZW5hbWUgPSBmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCBfX2Rpcm5hbWUgPSBkaXJuYW1lKF9fZmlsZW5hbWUpO1xuY29uc3Qgcm9vdERpciA9IHJlc29sdmUoX19kaXJuYW1lLCBcIi4uXCIpO1xuXG4vLyBMb2FkIGVudmlyb25tZW50IHZhcmlhYmxlcyBkZW5nYW4gcGF0aCBhYnNvbHV0XG5kb3RlbnYuY29uZmlnKHsgcGF0aDogcmVzb2x2ZShyb290RGlyLCBcIi5lbnZcIikgfSk7XG5cbi8vIExvZyBkYXRhYmFzZSBjb25maWd1cmF0aW9uIGZvciBkZWJ1Z2dpbmdcbmNvbnNvbGUubG9nKFwiRGF0YWJhc2UgY29uZmlndXJhdGlvbjpcIiwge1xuICBob3N0OiBwcm9jZXNzLmVudi5EQl9IT1NUIHx8IFwibG9jYWxob3N0XCIsXG4gIHVzZXI6IHByb2Nlc3MuZW52LkRCX1VTRVIgfHwgXCJyb290XCIsXG4gIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQl9OQU1FIHx8IFwicGhjX2Rhc2hib2FyZFwiLFxuICAvLyBEb24ndCBsb2cgdGhlIHBhc3N3b3JkIGZvciBzZWN1cml0eSByZWFzb25zXG59KTtcblxuLy8gS29uZmlndXJhc2kgZGF0YWJhc2VcbmNvbnN0IGRiQ29uZmlnID0ge1xuICBob3N0OiBwcm9jZXNzLmVudi5EQl9IT1NUIHx8IFwibG9jYWxob3N0XCIsXG4gIHVzZXI6IHByb2Nlc3MuZW52LkRCX1VTRVIgfHwgXCJyb290XCIsXG4gIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCBcIlwiLFxuICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuREJfTkFNRSB8fCBcInBoY19kYXNoYm9hcmRcIixcbiAgd2FpdEZvckNvbm5lY3Rpb25zOiB0cnVlLFxuICBjb25uZWN0aW9uTGltaXQ6IDEwLFxuICBxdWV1ZUxpbWl0OiAwLFxuICAvLyBFbmFibGUgZGVidWcgbW9kZSBpbiBkZXZlbG9wbWVudFxuICBkZWJ1ZzogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIixcbiAgLy8gQWRkIGNvbm5lY3Rpb24gdGltZW91dCBhbmQgZXJyb3IgaGFuZGxpbmdcbiAgY29ubmVjdFRpbWVvdXQ6IDEwMDAwLCAvLyAxMCBzZWNvbmRzXG4gIC8vIENvbnZlcnQgTElNSVQvT0ZGU0VUIHBhcmFtcyB0byBudW1iZXJzXG4gIHR5cGVDYXN0OiBmdW5jdGlvbiAoZmllbGQsIG5leHQpIHtcbiAgICBpZiAoZmllbGQudHlwZSA9PT0gXCJUSU5ZXCIgJiYgZmllbGQubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gZmllbGQuc3RyaW5nKCkgPT09IFwiMVwiOyAvLyBjb252ZXJ0IHRvIGJvb2xlYW5cbiAgICB9XG4gICAgcmV0dXJuIG5leHQoKTtcbiAgfSxcbn07XG5cbi8vIFBvb2wga29uZWtzaSB1bnR1ayBkaWd1bmFrYW4gZGkgc2VsdXJ1aCBhcGxpa2FzaVxuY29uc3QgcG9vbCA9IG15c3FsLmNyZWF0ZVBvb2woZGJDb25maWcpO1xuXG4vLyBGdW5jdGlvbiB1bnR1ayBtZW5kYXBhdGthbiBrb25la3NpIGRhcmkgcG9vbFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENvbm5lY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHBvb2wuZ2V0Q29ubmVjdGlvbigpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZXR0aW5nIERCIGNvbm5lY3Rpb246XCIsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZFwiKTtcbiAgfVxufVxuXG4vLyBRdWVyeSBoZWxwZXIgZGVuZ2FuIGVycm9yIGhhbmRsaW5nIChtZW5nZ3VuYWthbiBwcmVwYXJlZCBzdGF0ZW1lbnRzKVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5KHNxbCwgcGFyYW1zID0gW10pIHtcbiAgdHJ5IHtcbiAgICAvLyBFbnN1cmUgYWxsIHBhcmFtZXRlcnMgYXJlIHByb3Blcmx5IGZvcm1hdHRlZFxuICAgIGNvbnN0IGZvcm1hdHRlZFBhcmFtcyA9IHBhcmFtcy5tYXAoKHBhcmFtKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIocGFyYW0pOyAvLyBNYWtlIHN1cmUgbnVtYmVyIHBhcmFtcyBhcmUgcHJvcGVybHkgY2FzdFxuICAgICAgfVxuICAgICAgcmV0dXJuIHBhcmFtO1xuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coXCJFeGVjdXRpbmcgU1FMIHdpdGggcGFyYW1zOlwiLCB7IHNxbCwgZm9ybWF0dGVkUGFyYW1zIH0pO1xuICAgIGNvbnN0IFtyZXN1bHRzXSA9IGF3YWl0IHBvb2wuZXhlY3V0ZShzcWwsIGZvcm1hdHRlZFBhcmFtcyk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkRhdGFiYXNlIHF1ZXJ5IGVycm9yOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuLy8gUXVlcnkgaGVscGVyIHRhbnBhIHByZXBhcmVkIHN0YXRlbWVudHMgdW50dWsgcGVyaW50YWggc2VwZXJ0aSBVU0UgREFUQUJBU0VcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByYXdRdWVyeShzcWwpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgZ2V0Q29ubmVjdGlvbigpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBbcmVzdWx0c10gPSBhd2FpdCBjb25uZWN0aW9uLnF1ZXJ5KHNxbCk7XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9IGZpbmFsbHkge1xuICAgICAgY29ubmVjdGlvbi5yZWxlYXNlKCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJEYXRhYmFzZSByYXcgcXVlcnkgZXJyb3I6XCIsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vLyBWYWxpZGFzaSBrb25la3NpIGRhdGFiYXNlIHBhZGEgc3RhcnR1cFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZhbGlkYXRlQ29ubmVjdGlvbigpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgZ2V0Q29ubmVjdGlvbigpO1xuICAgIGNvbm5lY3Rpb24ucmVsZWFzZSgpO1xuICAgIGNvbnNvbGUubG9nKFwiRGF0YWJhc2UgY29ubmVjdGlvbiBzdWNjZXNzZnVsXCIpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZDpcIiwgZXJyb3IpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHF1ZXJ5LFxuICByYXdRdWVyeSxcbiAgZ2V0Q29ubmVjdGlvbixcbiAgdmFsaWRhdGVDb25uZWN0aW9uLFxufTtcbiJdLCJuYW1lcyI6WyJteXNxbCIsImRvdGVudiIsImZpbGVVUkxUb1BhdGgiLCJkaXJuYW1lIiwicmVzb2x2ZSIsIl9fZmlsZW5hbWUiLCJ1cmwiLCJfX2Rpcm5hbWUiLCJyb290RGlyIiwiY29uZmlnIiwicGF0aCIsImNvbnNvbGUiLCJsb2ciLCJob3N0IiwicHJvY2VzcyIsImVudiIsIkRCX0hPU1QiLCJ1c2VyIiwiREJfVVNFUiIsImRhdGFiYXNlIiwiREJfTkFNRSIsImRiQ29uZmlnIiwicGFzc3dvcmQiLCJEQl9QQVNTV09SRCIsIndhaXRGb3JDb25uZWN0aW9ucyIsImNvbm5lY3Rpb25MaW1pdCIsInF1ZXVlTGltaXQiLCJkZWJ1ZyIsImNvbm5lY3RUaW1lb3V0IiwidHlwZUNhc3QiLCJmaWVsZCIsIm5leHQiLCJ0eXBlIiwibGVuZ3RoIiwic3RyaW5nIiwicG9vbCIsImNyZWF0ZVBvb2wiLCJnZXRDb25uZWN0aW9uIiwiZXJyb3IiLCJFcnJvciIsInF1ZXJ5Iiwic3FsIiwicGFyYW1zIiwiZm9ybWF0dGVkUGFyYW1zIiwibWFwIiwicGFyYW0iLCJOdW1iZXIiLCJyZXN1bHRzIiwiZXhlY3V0ZSIsInJhd1F1ZXJ5IiwiY29ubmVjdGlvbiIsInJlbGVhc2UiLCJ2YWxpZGF0ZUNvbm5lY3Rpb24iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.js\n");

/***/ }),

/***/ "(rsc)/./lib/prisma.js":
/*!***********************!*\
  !*** ./lib/prisma.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $transaction: () => (/* binding */ $transaction),\n/* harmony export */   Company: () => (/* binding */ Company),\n/* harmony export */   Doctor: () => (/* binding */ Doctor),\n/* harmony export */   ICD: () => (/* binding */ ICD),\n/* harmony export */   Insurance: () => (/* binding */ Insurance),\n/* harmony export */   Patient: () => (/* binding */ Patient),\n/* harmony export */   Polyclinic: () => (/* binding */ Polyclinic),\n/* harmony export */   PostalCode: () => (/* binding */ PostalCode),\n/* harmony export */   Treatment: () => (/* binding */ Treatment),\n/* harmony export */   User: () => (/* binding */ User),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getPatients: () => (/* binding */ getPatients),\n/* harmony export */   query: () => (/* reexport safe */ _db_js__WEBPACK_IMPORTED_MODULE_0__.query),\n/* harmony export */   rawQuery: () => (/* reexport safe */ _db_js__WEBPACK_IMPORTED_MODULE_0__.rawQuery)\n/* harmony export */ });\n/* harmony import */ var _db_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./db.js */ \"(rsc)/./lib/db.js\");\n\n// Export fungsi query untuk digunakan di route API\n\n// Helper functions untuk User operations\nconst User = {\n    async findUnique (where) {\n        const conditions = [];\n        const params = [];\n        if (where.id) {\n            conditions.push(\"id = ?\");\n            params.push(where.id);\n        }\n        if (where.email) {\n            conditions.push(\"email = ?\");\n            params.push(where.email);\n        }\n        const sql = `SELECT * FROM users WHERE ${conditions.join(\" AND \")} LIMIT 1`;\n        const results = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return results[0] || null;\n    },\n    async findMany (options = {}) {\n        let sql = \"SELECT * FROM users\";\n        const params = [];\n        if (options.where) {\n            const conditions = [];\n            if (options.where.role) {\n                conditions.push(\"role = ?\");\n                params.push(options.where.role);\n            }\n            if (conditions.length > 0) {\n                sql += ` WHERE ${conditions.join(\" AND \")}`;\n            }\n        }\n        if (options.orderBy) {\n            if (options.orderBy.createdAt) {\n                sql += ` ORDER BY created_at ${options.orderBy.createdAt.toUpperCase()}`;\n            }\n        }\n        return await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n    },\n    async create (data) {\n        const sql = `\n      INSERT INTO users (email, password, name, role, created_at, updated_at)\n      VALUES (?, ?, ?, ?, NOW(), NOW())\n    `;\n        const params = [\n            data.email,\n            data.password,\n            data.name,\n            data.role || \"user\"\n        ];\n        const result = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        // Return the created user\n        return await this.findUnique({\n            id: result.insertId\n        });\n    },\n    async update (where, data) {\n        const setClauses = [];\n        const params = [];\n        if (data.name !== undefined) {\n            setClauses.push(\"name = ?\");\n            params.push(data.name);\n        }\n        if (data.email !== undefined) {\n            setClauses.push(\"email = ?\");\n            params.push(data.email);\n        }\n        if (data.password !== undefined) {\n            setClauses.push(\"password = ?\");\n            params.push(data.password);\n        }\n        if (data.role !== undefined) {\n            setClauses.push(\"role = ?\");\n            params.push(data.role);\n        }\n        setClauses.push(\"updated_at = NOW()\");\n        const sql = `UPDATE users SET ${setClauses.join(\", \")} WHERE id = ?`;\n        params.push(where.id);\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique(where);\n    }\n};\n// Helper functions untuk Patient operations\nconst Patient = {\n    async findUnique (where) {\n        const conditions = [];\n        const params = [];\n        if (where.id) {\n            conditions.push(\"id = ?\");\n            params.push(where.id);\n        }\n        if (where.mrNumber) {\n            conditions.push(\"mr_number = ?\");\n            params.push(where.mrNumber);\n        }\n        const sql = `SELECT * FROM patients WHERE ${conditions.join(\" AND \")} LIMIT 1`;\n        const results = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return results[0] || null;\n    },\n    async findMany (options = {}) {\n        let sql = \"SELECT * FROM patients\";\n        const params = [];\n        if (options.where) {\n            const conditions = [];\n            if (options.where.OR) {\n                const orConditions = [];\n                options.where.OR.forEach((condition)=>{\n                    if (condition.name && condition.name.contains) {\n                        orConditions.push(\"name LIKE ?\");\n                        params.push(`%${condition.name.contains}%`);\n                    }\n                    if (condition.nik && condition.nik.contains) {\n                        orConditions.push(\"nik LIKE ?\");\n                        params.push(`%${condition.nik.contains}%`);\n                    }\n                    if (condition.mrNumber && condition.mrNumber.contains) {\n                        orConditions.push(\"mr_number LIKE ?\");\n                        params.push(`%${condition.mrNumber.contains}%`);\n                    }\n                });\n                if (orConditions.length > 0) {\n                    conditions.push(`(${orConditions.join(\" OR \")})`);\n                }\n            }\n            if (conditions.length > 0) {\n                sql += ` WHERE ${conditions.join(\" AND \")}`;\n            }\n        }\n        if (options.include && options.include.insurance) {\n        // For now, just return patients without insurance data\n        // You can implement JOIN if needed\n        }\n        if (options.take) {\n            sql += ` LIMIT ${options.take}`;\n        }\n        return await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n    },\n    async create (data) {\n        const sql = `\n      INSERT INTO patients (\n        mr_number, name, nik, birth_date, gender, blood_type, \n        occupation, marital_status, nip, citizenship, address, \n        phone, email, province_id, province_name, city_id, city_name, \n        district_id, district_name, village_id, village_name, \n        postal_code, company_id, created_at, updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())\n    `;\n        const params = [\n            data.mrNumber,\n            data.name,\n            data.nik,\n            data.birthDate,\n            data.gender,\n            data.bloodType,\n            data.occupation,\n            data.maritalStatus,\n            data.nip,\n            data.citizenship || \"WNI\",\n            data.address,\n            data.phone,\n            data.email,\n            data.provinceId,\n            data.provinceName,\n            data.cityId,\n            data.cityName,\n            data.districtId,\n            data.districtName,\n            data.villageId,\n            data.villageName,\n            data.postalCode,\n            data.companyId\n        ];\n        const result = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique({\n            id: result.insertId\n        });\n    },\n    async update (where, data) {\n        const setClauses = [];\n        const params = [];\n        Object.keys(data).forEach((key)=>{\n            if (data[key] !== undefined && key !== \"insurance\") {\n                const dbKey = key === \"mrNumber\" ? \"mr_number\" : key === \"birthDate\" ? \"birth_date\" : key === \"bloodType\" ? \"blood_type\" : key === \"maritalStatus\" ? \"marital_status\" : key === \"provinceId\" ? \"province_id\" : key === \"provinceName\" ? \"province_name\" : key === \"cityId\" ? \"city_id\" : key === \"cityName\" ? \"city_name\" : key === \"districtId\" ? \"district_id\" : key === \"districtName\" ? \"district_name\" : key === \"villageId\" ? \"village_id\" : key === \"villageName\" ? \"village_name\" : key === \"postalCode\" ? \"postal_code\" : key === \"companyId\" ? \"company_id\" : key;\n                setClauses.push(`${dbKey} = ?`);\n                params.push(data[key]);\n            }\n        });\n        setClauses.push(\"updated_at = NOW()\");\n        const sql = `UPDATE patients SET ${setClauses.join(\", \")} WHERE id = ?`;\n        params.push(where.id);\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique(where);\n    },\n    async delete (where) {\n        const sql = \"DELETE FROM patients WHERE id = ?\";\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.id\n        ]);\n        return {\n            id: where.id\n        };\n    },\n    async findFirst (options) {\n        let sql = \"SELECT * FROM patients\";\n        const params = [];\n        if (options.where) {\n            const conditions = [];\n            // Handle mrNumber startsWith\n            if (options.where.mrNumber && options.where.mrNumber.startsWith) {\n                conditions.push(\"mr_number LIKE ?\");\n                params.push(`${options.where.mrNumber.startsWith}%`);\n            }\n            if (conditions.length > 0) {\n                sql += ` WHERE ${conditions.join(\" AND \")}`;\n            }\n        }\n        // Handle orderBy\n        if (options.orderBy) {\n            if (options.orderBy.mrNumber) {\n                sql += ` ORDER BY mr_number ${options.orderBy.mrNumber.toUpperCase()}`;\n            }\n        }\n        sql += \" LIMIT 1\";\n        const results = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return results[0] || null;\n    }\n};\n// Helper functions untuk Company operations\nconst Company = {\n    async findUnique (where) {\n        const sql = \"SELECT * FROM companies WHERE id = ? LIMIT 1\";\n        const results = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.id\n        ]);\n        return results[0] || null;\n    },\n    async findMany (options = {}) {\n        let sql = \"SELECT * FROM companies\";\n        if (options.orderBy && options.orderBy.name) {\n            sql += ` ORDER BY name ${options.orderBy.name.toUpperCase()}`;\n        }\n        return await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql);\n    },\n    async create (data) {\n        const sql = `\n      INSERT INTO companies (name, address, phone, email, created_at, updated_at)\n      VALUES (?, ?, ?, ?, NOW(), NOW())\n    `;\n        const params = [\n            data.name,\n            data.address,\n            data.phone,\n            data.email\n        ];\n        const result = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique({\n            id: result.insertId\n        });\n    },\n    async update (where, data) {\n        const setClauses = [];\n        const params = [];\n        [\n            \"name\",\n            \"address\",\n            \"phone\",\n            \"email\"\n        ].forEach((field)=>{\n            if (data[field] !== undefined) {\n                setClauses.push(`${field} = ?`);\n                params.push(data[field]);\n            }\n        });\n        setClauses.push(\"updated_at = NOW()\");\n        const sql = `UPDATE companies SET ${setClauses.join(\", \")} WHERE id = ?`;\n        params.push(where.id);\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique(where);\n    },\n    async delete (where) {\n        const sql = \"DELETE FROM companies WHERE id = ?\";\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.id\n        ]);\n        return {\n            id: where.id\n        };\n    }\n};\n// Helper functions untuk Doctor operations\nconst Doctor = {\n    async findUnique (where) {\n        const sql = \"SELECT * FROM doctors WHERE id = ? LIMIT 1\";\n        const results = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.id\n        ]);\n        return results[0] || null;\n    },\n    async findMany (options = {}) {\n        let sql = \"SELECT * FROM doctors\";\n        if (options.orderBy && options.orderBy.name) {\n            sql += ` ORDER BY name ${options.orderBy.name.toUpperCase()}`;\n        }\n        return await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql);\n    },\n    async create (data) {\n        const sql = `\n      INSERT INTO doctors (name, license_number, specialization, phone, email, created_at, updated_at)\n      VALUES (?, ?, ?, ?, ?, NOW(), NOW())\n    `;\n        const params = [\n            data.name,\n            data.licenseNumber,\n            data.specialization,\n            data.phone,\n            data.email\n        ];\n        const result = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique({\n            id: result.insertId\n        });\n    },\n    async update (where, data) {\n        const setClauses = [];\n        const params = [];\n        [\n            \"name\",\n            \"licenseNumber\",\n            \"specialization\",\n            \"phone\",\n            \"email\"\n        ].forEach((field)=>{\n            if (data[field] !== undefined) {\n                const dbField = field === \"licenseNumber\" ? \"license_number\" : field;\n                setClauses.push(`${dbField} = ?`);\n                params.push(data[field]);\n            }\n        });\n        setClauses.push(\"updated_at = NOW()\");\n        const sql = `UPDATE doctors SET ${setClauses.join(\", \")} WHERE id = ?`;\n        params.push(where.id);\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique(where);\n    },\n    async delete (where) {\n        const sql = \"DELETE FROM doctors WHERE id = ?\";\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.id\n        ]);\n        return {\n            id: where.id\n        };\n    }\n};\n// Helper functions untuk Insurance operations\nconst Insurance = {\n    async findUnique (where) {\n        const conditions = [];\n        const params = [];\n        if (where.id) {\n            conditions.push(\"id = ?\");\n            params.push(where.id);\n        }\n        if (where.patientId) {\n            conditions.push(\"patient_id = ?\");\n            params.push(where.patientId);\n        }\n        const sql = `SELECT * FROM insurance WHERE ${conditions.join(\" AND \")} LIMIT 1`;\n        const results = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return results[0] || null;\n    },\n    async findMany (options = {}) {\n        let sql = \"SELECT * FROM insurance\";\n        if (options.orderBy && options.orderBy.provider) {\n            sql += ` ORDER BY provider ${options.orderBy.provider.toUpperCase()}`;\n        }\n        return await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql);\n    },\n    async create (data) {\n        const sql = `\n      INSERT INTO insurance (provider, number, type, status, patient_id, created_at, updated_at)\n      VALUES (?, ?, ?, ?, ?, NOW(), NOW())\n    `;\n        const params = [\n            data.provider,\n            data.number,\n            data.type,\n            data.status,\n            data.patientId\n        ];\n        const result = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique({\n            id: result.insertId\n        });\n    },\n    async update (where, data) {\n        const setClauses = [];\n        const params = [];\n        [\n            \"provider\",\n            \"number\",\n            \"type\",\n            \"status\"\n        ].forEach((field)=>{\n            if (data[field] !== undefined) {\n                setClauses.push(`${field} = ?`);\n                params.push(data[field]);\n            }\n        });\n        setClauses.push(\"updated_at = NOW()\");\n        const sql = `UPDATE insurance SET ${setClauses.join(\", \")} WHERE id = ?`;\n        params.push(where.id);\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique(where);\n    },\n    async delete (where) {\n        const sql = \"DELETE FROM insurance WHERE id = ?\";\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.id\n        ]);\n        return {\n            id: where.id\n        };\n    },\n    async deleteMany (where) {\n        const sql = \"DELETE FROM insurance WHERE patient_id = ?\";\n        return await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.patientId\n        ]);\n    }\n};\n// Helper functions untuk ICD operations\nconst ICD = {\n    async findUnique (where) {\n        const sql = \"SELECT * FROM icd_codes WHERE id = ? LIMIT 1\";\n        const results = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.id\n        ]);\n        return results[0] || null;\n    },\n    async findMany (options = {}) {\n        let sql = \"SELECT * FROM icd_codes\";\n        if (options.orderBy && options.orderBy.code) {\n            sql += ` ORDER BY code ${options.orderBy.code.toUpperCase()}`;\n        }\n        return await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql);\n    },\n    async create (data) {\n        const sql = `\n      INSERT INTO icd_codes (code, description, created_at, updated_at)\n      VALUES (?, ?, NOW(), NOW())\n    `;\n        const params = [\n            data.code,\n            data.description\n        ];\n        const result = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique({\n            id: result.insertId\n        });\n    },\n    async update (where, data) {\n        const setClauses = [];\n        const params = [];\n        [\n            \"code\",\n            \"description\"\n        ].forEach((field)=>{\n            if (data[field] !== undefined) {\n                setClauses.push(`${field} = ?`);\n                params.push(data[field]);\n            }\n        });\n        setClauses.push(\"updated_at = NOW()\");\n        const sql = `UPDATE icd_codes SET ${setClauses.join(\", \")} WHERE id = ?`;\n        params.push(where.id);\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique(where);\n    },\n    async delete (where) {\n        const sql = \"DELETE FROM icd_codes WHERE id = ?\";\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.id\n        ]);\n        return {\n            id: where.id\n        };\n    }\n};\n// Helper functions untuk Treatment operations\nconst Treatment = {\n    async findUnique (where) {\n        const sql = \"SELECT * FROM treatments WHERE id = ? LIMIT 1\";\n        const results = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.id\n        ]);\n        return results[0] || null;\n    },\n    async findMany (options = {}) {\n        let sql = \"SELECT * FROM treatments\";\n        if (options.orderBy && options.orderBy.name) {\n            sql += ` ORDER BY name ${options.orderBy.name.toUpperCase()}`;\n        }\n        return await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql);\n    },\n    async create (data) {\n        const sql = `\n      INSERT INTO treatments (name, code, price, created_at, updated_at)\n      VALUES (?, ?, ?, NOW(), NOW())\n    `;\n        const params = [\n            data.name,\n            data.code,\n            data.price\n        ];\n        const result = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique({\n            id: result.insertId\n        });\n    },\n    async update (where, data) {\n        const setClauses = [];\n        const params = [];\n        [\n            \"name\",\n            \"code\",\n            \"price\"\n        ].forEach((field)=>{\n            if (data[field] !== undefined) {\n                setClauses.push(`${field} = ?`);\n                params.push(data[field]);\n            }\n        });\n        setClauses.push(\"updated_at = NOW()\");\n        const sql = `UPDATE treatments SET ${setClauses.join(\", \")} WHERE id = ?`;\n        params.push(where.id);\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique(where);\n    },\n    async delete (where) {\n        const sql = \"DELETE FROM treatments WHERE id = ?\";\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.id\n        ]);\n        return {\n            id: where.id\n        };\n    }\n};\n// Helper functions untuk Polyclinic operations\nconst Polyclinic = {\n    async findUnique (where) {\n        const sql = \"SELECT * FROM polyclinics WHERE id = ? LIMIT 1\";\n        const results = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.id\n        ]);\n        return results[0] || null;\n    },\n    async findMany (options = {}) {\n        let sql = \"SELECT * FROM polyclinics\";\n        if (options.orderBy && options.orderBy.name) {\n            sql += ` ORDER BY name ${options.orderBy.name.toUpperCase()}`;\n        }\n        return await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql);\n    },\n    async create (data) {\n        const sql = `\n      INSERT INTO polyclinics (name, description, created_at, updated_at)\n      VALUES (?, ?, NOW(), NOW())\n    `;\n        const params = [\n            data.name,\n            data.description\n        ];\n        const result = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique({\n            id: result.insertId\n        });\n    },\n    async update (where, data) {\n        const setClauses = [];\n        const params = [];\n        [\n            \"name\",\n            \"description\"\n        ].forEach((field)=>{\n            if (data[field] !== undefined) {\n                setClauses.push(`${field} = ?`);\n                params.push(data[field]);\n            }\n        });\n        setClauses.push(\"updated_at = NOW()\");\n        const sql = `UPDATE polyclinics SET ${setClauses.join(\", \")} WHERE id = ?`;\n        params.push(where.id);\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findUnique(where);\n    },\n    async delete (where) {\n        const sql = \"DELETE FROM polyclinics WHERE id = ?\";\n        await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, [\n            where.id\n        ]);\n        return {\n            id: where.id\n        };\n    }\n};\n// Helper functions untuk PostalCode operations\nconst PostalCode = {\n    async findFirst (where) {\n        const conditions = [];\n        const params = [];\n        if (where.code) {\n            conditions.push(\"code = ?\");\n            params.push(where.code);\n        }\n        const sql = `SELECT * FROM postal_codes WHERE ${conditions.join(\" AND \")} LIMIT 1`;\n        const results = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return results[0] || null;\n    },\n    async create (data) {\n        const sql = `\n      INSERT INTO postal_codes (code, city, province, created_at, updated_at)\n      VALUES (?, ?, ?, NOW(), NOW())\n    `;\n        const params = [\n            data.code,\n            data.city,\n            data.province\n        ];\n        const result = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n        return await this.findFirst({\n            code: data.code\n        });\n    }\n};\n// Transaction helper\nasync function $transaction(operations) {\n    const connection = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.getConnection)();\n    try {\n        await connection.beginTransaction();\n        const results = [];\n        for (const operation of operations){\n            // Execute each operation within the transaction\n            if (typeof operation === \"function\") {\n                const result = await operation();\n                results.push(result);\n            }\n        }\n        await connection.commit();\n        return results;\n    } catch (error) {\n        await connection.rollback();\n        throw error;\n    } finally{\n        connection.release();\n    }\n}\n// Fungsi helper untuk operasi CRUD pasien (backward compatibility)\nasync function getPatients(search = \"\", page = 1, limit = 10) {\n    const offset = (page - 1) * limit;\n    let sql = \"SELECT * FROM patients\";\n    let params = [];\n    if (search) {\n        sql += \" WHERE name LIKE ? OR mrn LIKE ?\";\n        params = [\n            `%${search}%`,\n            `%${search}%`\n        ];\n    }\n    sql += \" ORDER BY created_at DESC LIMIT ? OFFSET ?\";\n    params.push(parseInt(limit), parseInt(offset));\n    const patients = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(sql, params);\n    // Dapatkan total\n    let countSql = \"SELECT COUNT(*) as total FROM patients\";\n    if (search) {\n        countSql += \" WHERE name LIKE ? OR mrn LIKE ?\";\n    }\n    const countResults = await (0,_db_js__WEBPACK_IMPORTED_MODULE_0__.query)(countSql, search ? [\n        `%${search}%`,\n        `%${search}%`\n    ] : []);\n    const total = countResults[0]?.total || 0;\n    return {\n        data: patients,\n        pagination: {\n            total,\n            page: parseInt(page),\n            limit: parseInt(limit),\n            totalPages: Math.ceil(total / limit)\n        }\n    };\n}\n// Export default object untuk kompatibilitas dengan code yang mungkin masih menggunakan prisma.* syntax\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    user: User,\n    patient: Patient,\n    company: Company,\n    doctor: Doctor,\n    insurance: Insurance,\n    icd: ICD,\n    treatment: Treatment,\n    polyclinic: Polyclinic,\n    postalCode: PostalCode,\n    $transaction,\n    $disconnect: ()=>Promise.resolve()\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/prisma.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/mysql2","vendor-chunks/aws-ssl-profiles","vendor-chunks/iconv-lite","vendor-chunks/long","vendor-chunks/named-placeholders","vendor-chunks/denque","vendor-chunks/dotenv","vendor-chunks/is-property","vendor-chunks/lru.min","vendor-chunks/sqlstring","vendor-chunks/seq-queue","vendor-chunks/generate-function","vendor-chunks/safer-buffer"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fpatients%2Froute&page=%2Fapi%2Fpatients%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpatients%2Froute.js&appDir=%2FVolumes%2FData-2%2FPHC%2FProject%2Fdash-app%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FVolumes%2FData-2%2FPHC%2FProject%2Fdash-app&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();